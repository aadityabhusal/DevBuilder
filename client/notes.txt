Implementation
0. Navigator Section
1. Realtime db upadate
2. In-browser update and caching
3. Global function for adding, removing and moving elements

_________________________________

I need to focus on more important things that will be beneficial to developers such as :
better ways to write code
better ways to handle APIs
easy integration of services
some coloring and desiging tools
Powerful builder API for other uses

_________________________________

ISSUES

15. (Now) Validating DOM Nesting i.e. not allowing list item to be nestes inside another list item
16. (Later) Create separate element attributes for html attributes such as required, controls etc. They can be stored in a array with a checkbox for each of them in the properties panel that can push and pop them in and out of the array respectively.
17. Stopping Unnecessary renders of the elements
18. All the elements render when selecting an element and making changes to SelectedElementContext
19. Find a way to access an IframeElement element and then modify it without rendering every element in the site

_________________________________

Boolean attributes:

HTML boolean attributes such as 'required', 'controls' can be stored in an array that could be stored as a value of a property in the element object.
E.g. {
   tagName: "",
   ...,
   booleanAttributes: ['required', '...']
}
The Properties Panel will contain the list of all the boolean (and all other) attributes of each element. The program will then check the attributes present in the boolean attributes. The user can add/remove boolean attributes by checking/unchecking in Properties panel

_________________________________

Sub elements:

Create sub-elements that cannot be dragged or interacted with but could be partially dropped elements into.
These elements could have a property in their element object indicating to be a sub element
Eg. src element inside video element, results element inside databox element

_________________________________

(Done) Element communication between Navigator, Properties and HTML Elements 

(Done) Since both HTML elements and element objects have id
we can communicate between left and right section by taking the ID from HTML element and then updating the pageTree and then updating the HTML element.

(Done) Webflow also stores the ID of each elements in HTML data-* properties 
e.g. data-w-id="", data-wf-id=["",""], data-w-instance-of=""
The elements in the navigator panel also store the elements' id and perform action accordingly

_________________________________

(Done) Adding Styling changes to history:

The styling of the elements can be added to the action history in three conditions:
1. Valid style created
2. Style saved
3. Node value changes in node based styling

_________________________________

DONE:
